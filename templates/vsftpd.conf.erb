# This file is managed by puppet
#
# The default compiled in settings are fairly paranoid. This sample file
# loosens things up a bit, to make the ftp daemon more usable.
# Please see vsftpd.conf.5 for all compiled in defaults.
#
# READ THIS: This example file is NOT an exhaustive list of vsftpd options.
# Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's
# capabilities.
#
# Generic parameters
#
# When "listen" directive is enabled, vsftpd runs in standalone mode and
# listens on IPv4 sockets. This directive cannot be used in conjunction
# with the listen_ipv6 directive.
listen=YES
#
# This directive enables listening on IPv6 sockets. To listen on IPv4 and IPv6
# sockets, you must run two copies of vsftpd with two configuration files.
# Make sure, that one of the listen options is commented !!
#listen_ipv6=YES
#
ftpd_banner=<%= scope.lookupvar('vsftpd::ftpd_banner') %>
write_enable=<%= scope.lookupvar('vsftpd::real_write_enable') %>
connect_from_port_20=<%= scope.lookupvar('vsftpd::real_connect_from_port_20') %>
dirmessage_enable=<%= scope.lookupvar('vsftpd::real_dirmessage_enable') %>
use_localtime=<%= scope.lookupvar('vsftpd::real_use_localtime') %>
idle_session_timeout=<%= scope.lookupvar('vsftpd::idle_session_timeout') %>
data_connection_timeout=<%= scope.lookupvar('vsftpd::data_connection_timeout') %>
pam_service_name=<%= scope.lookupvar('vsftpd::pam_service_name') %>

# Anonymous FTP parameters
anonymous_enable=<%= scope.lookupvar('vsftpd::real_anonymous_enable') %>
anon_upload_enable=<%= scope.lookupvar('vsftpd::real_anon_upload_enable') %>
anon_mkdir_write_enable=<%= scope.lookupvar('vsftpd::real_anon_mkdir_write_enable') %>

# Local users parameters
local_enable=<%= scope.lookupvar('vsftpd::real_local_enable') %>
local_umask=<%= scope.lookupvar('vsftpd::local_umask') %>

<% if scope.lookupvar('vsftpd::userlist_enable') != '' -%>
userlist_enable=<%= scope.lookupvar('vsftpd::real_userlist_enable') %>
userlist_file=<%= scope.lookupvar('vsftpd::userlist_file') %>
<% end -%>

# Logging related paremeters
xferlog_enable=<%= scope.lookupvar('vsftpd::real_xferlog_enable') %>
xferlog_std_format=<%= scope.lookupvar('vsftpd::real_xferlog_std_format') %>
xferlog_file=<%= scope.lookupvar('vsftpd::xferlog_file') %>

<% if scope.lookupvar('vsftpd::real_deny_email_enable') != '' -%>
deny_email_enable=<%= scope.lookupvar('vsftpd::real_deny_email_enable') %>
banned_email_file=<%= scope.lookupvar('vsftpd::banned_email_file') %>
<% end -%>

chroot_local_user=<%= scope.lookupvar('vsftpd::real_chroot_local_user') %>
<% if scope.lookupvar('vsftpd::real_chroot_list_enable') != '' -%>
chroot_list_enable=<%= scope.lookupvar('vsftpd::real_chroot_list_enable') %>
chroot_list_file=<%= scope.lookupvar('vsftpd::chroot_list_file') -%>
<% end -%>

##### Other parameters
# If you want, you can arrange for uploaded anonymous files to be owned by
# a different user. Note! Using "root" for uploaded files is not
# recommended!
#chown_uploads=YES
#chown_username=whoever
#
# It is recommended that you define on your system a unique user which the
# ftp server can use as a totally isolated and unprivileged user.
#nopriv_user=ftpsecure
#
# Enable this and the server will recognise asynchronous ABOR requests. Not
# recommended for security (the code is non-trivial). Not enabling it,
# however, may confuse older FTP clients.
#async_abor_enable=YES
#
# By default the server will pretend to allow ASCII mode but in fact ignore
# the request. Turn on the below options to have the server actually do ASCII
# mangling on files when in ASCII mode.
# Beware that on some FTP servers, ASCII support allows a denial of service
# attack (DoS) via the command "SIZE /big/file" in ASCII mode. vsftpd
# predicted this attack and has always been safe, reporting the size of the
# raw file.
# ASCII mangling is a horrible feature of the protocol.
#ascii_upload_enable=YES
#ascii_download_enable=YES
#
# You may activate the "-R" option to the builtin ls. This is disabled by
# default to avoid remote users being able to cause excessive I/O on large
# sites. However, some broken FTP clients such as "ncftp" and "mirror" assume
# the presence of the "-R" option, so there is a strong case for enabling it.
#ls_recurse_enable=YES
